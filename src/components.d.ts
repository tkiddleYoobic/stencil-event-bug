/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


import {
  EventComponent as EventComponent
} from './components/event-component/event-component';

declare global {
  interface HTMLEventComponentElement extends EventComponent, HTMLStencilElement {
  }
  var HTMLEventComponentElement: {
    prototype: HTMLEventComponentElement;
    new (): HTMLEventComponentElement;
  };
  interface HTMLElementTagNameMap {
    'event-component': HTMLEventComponentElement;
  }
  interface ElementTagNameMap {
    'event-component': HTMLEventComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'event-component': JSXElements.EventComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface EventComponentAttributes extends HTMLAttributes {
      
      'onNewMethod'?: (event: CustomEvent<string>) => void;
      'onOldMethod'?: (event: CustomEvent<string>) => void;
    }
  }
}


import {
  listenerComponent as ListenerComponent
} from './components/listener-component/listener-component';

declare global {
  interface HTMLListenerComponentElement extends ListenerComponent, HTMLStencilElement {
  }
  var HTMLListenerComponentElement: {
    prototype: HTMLListenerComponentElement;
    new (): HTMLListenerComponentElement;
  };
  interface HTMLElementTagNameMap {
    'listener-component': HTMLListenerComponentElement;
  }
  interface ElementTagNameMap {
    'listener-component': HTMLListenerComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'listener-component': JSXElements.ListenerComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface ListenerComponentAttributes extends HTMLAttributes {
      
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
